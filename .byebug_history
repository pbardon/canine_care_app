continue
params[:dog]
current_user.dogs.new(params[:dog])
current_user.dogs.new
current_user.dogs
current_user.dogs.new(dog_params)
continue
dog_params
current_user
continue
step
exit
params[:dog][:photo_attributes][:signed_blob_id]
params[:dog][:photo_attributes]
params[:dog]
params
params[:photo_attributes]
params[:signed_blob_id]
params
dog_params
continue
klass.id
klass = build_class.new
klass = new build_class
build_class
build_class.id
build_class
attribute_assigner
n
evaluator
n
step
strategy
n
step
build_strategy
step
payload
n
step
n
step
continue
ex.full_message
ex.methods
ex.stack
ex
n
payload
n
step
n
step
factory
n
step
name
step
return
step
@overrides
step
create(:user)
exit
continue
step
&block
block
step
return
step
name
step
create(:sitter)
continue
[].concat([Sitter.find_by_user_id(params[:user_id])])
[].concat(Sitter.find_by_user_id(params[:user_id]))
Sitter.find_by_user_id(params[:user_id])
params[:user_id]
continue
output
continue
geoloactionaddress
street_address
output
continue
self
params.require(:dog).permit(:name, :age, :description, :size, :dog_photo)
bt
source
show
params
up
step
@dog = current_user.dogs.new(dog_params)
@dog = current_user.dogs
@dog = current_user.dogs.new(dog_params)
current_user.dogs.new
current_user.dogs.nwq
current_user.dogs
return
@current_user
session[:session_token]
s
so
current_user.dogs.new(dog_params)
Dog.all
Dogs.all
current_user.dogs.new(dog_params)
current_user.dogs
current_user
return
step
dog_params
return
step
continue
next
current_user
continue
session[:session_token]
User.find_by_session_token(session[:session_token])
session[:session_token]
session[:session_token:]
continue
@sitter.comments
@sitter.comments.user_id
@sitter.comments
@sitter
continue
params[:id]
params["id"]
params.id
params
continue
sitter_params
continue
sitter_params
continue
sitter_params
continue
sitter_params
continue
step
continue
dog_params
continue
dog_params
continue
step
@user
continue
@user.save
@user
continue
continue'
@user.errors.full_messages
@user.errors
@user.save
@user
